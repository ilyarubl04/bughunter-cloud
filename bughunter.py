import os
import json
import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
import openai
from random import choice

TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

with open("bughunter_100_cases.json", encoding="utf-8") as f:
    bug_cases = json.load(f)

user_states = {}
user_scores = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç—Ä–µ–Ω–∞–∂—ë—Ä Bug Hunter üêû\n–ù–∞–ø–∏—à–∏ /next, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ.")

async def next_case(update: Update, context: ContextTypes.DEFAULT_TYPE):
    case = choice(bug_cases)
    uid = update.effective_chat.id
    user_states[uid] = case
    reply_markup = ReplyKeyboardMarkup([['üß© –ü–æ–¥—Å–∫–∞–∑–∫–∞', 'üìä –ú–æ–π —Å—á—ë—Ç']], one_time_keyboard=False, resize_keyboard=True)
    await update.message.reply_text(f"üéØ –°—Ü–µ–Ω–∞: {case['scene']}\nüß© {case['description']}\n\nüìù –ù–∞–ø–∏—à–∏, –≤ —á—ë–º –±–∞–≥:", reply_markup=reply_markup)

async def check_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_chat.id
    answer = update.message.text.strip()

    if uid not in user_states:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ /next, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ.")
        return

    case = user_states[uid]
    keywords = case['keywords']
    matches = [k for k in keywords if k.lower() in answer.lower()]

    user_scores[uid] = user_scores.get(uid, 0)

    if matches:
        user_scores[uid] += 1
        await update.message.reply_text(f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢—ã —É–ª–æ–≤–∏–ª –±–∞–≥: {', '.join(matches)}")
    else:
        await update.message.reply_text("‚ùó–ü–æ—á—Ç–∏! –ü–æ–ø—Ä–æ–±—É–π –ø–æ–¥—É–º–∞—Ç—å –ø—Ä–æ –≤–∞–ª–∏–¥–∞—Ü–∏—é –∏–ª–∏ –ª–æ–≥–∏–∫—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.")

    feedback = generate_feedback(answer, keywords)
    await update.message.reply_text(f"ü§ñ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n{feedback}")

async def hint(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_chat.id
    if uid not in user_states:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–∑–æ–≤–∏ /next!")
        return
    case = user_states[uid]
    hint_text = "üí° –ü–æ–¥—É–º–∞–π –æ–± —ç—Ç–∏—Ö –∞—Å–ø–µ–∫—Ç–∞—Ö: " + ", ".join(case["keywords"])
    await update.message.reply_text(hint_text)

async def score(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_chat.id
    score = user_scores.get(uid, 0)
    await update.message.reply_text(f"üìä –¢–≤–æ–π —Å—á—ë—Ç: {score} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.")

def generate_feedback(user_input, keywords):
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫ –∏ —Ç—Ä–µ–Ω–µ—Ä –ø–æ –±–∞–≥-—Ä–µ–ø–æ—Ä—Ç–∞–º."},
                {"role": "user", "content": f"–°—Ç—É–¥–µ–Ω—Ç –æ–ø–∏—Å–∞–ª –±–∞–≥ —Ç–∞–∫: '{user_input}'. –û—Ü–µ–Ω–∏ –∫—Ä–∞—Ç–∫–æ –∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ, –∫–∞–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã –æ–Ω —É–ø—É—Å—Ç–∏–ª. –ü–æ–¥—Å–∫–∞–∑–∫–∏: {', '.join(keywords)}"}
            ]
        )
        return response["choices"][0]["message"]["content"]
    except Exception as e:
        return f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å AI-–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {str(e)}"

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("next", next_case))
    app.add_handler(CommandHandler("hint", hint))
    app.add_handler(CommandHandler("score", score))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, check_answer))
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ñ–¥–∏ –∫–æ–º–∞–Ω–¥ /start –∏ /next –≤ Telegram.")
    app.run_polling()
